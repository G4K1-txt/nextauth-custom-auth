{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projeto/fine/src/lib/sendEmail.ts"],"sourcesContent":["import nodemailer from \"nodemailer\"\r\n\r\nexport async function sendMail({ to, subject, html }: { to: string; subject: string; html: string }) {\r\n  try {\r\n    const transporter = nodemailer.createTransport({\r\n      host: process.env.SMTP_HOST,\r\n      port: 587,\r\n      secure: false,\r\n      auth: {\r\n        user: process.env.SMTP_USER,\r\n        pass: process.env.SMTP_PASS,\r\n      },\r\n    });\r\n\r\n    const info = await transporter.sendMail({\r\n      from: `\"Seu App\" <${process.env.SMTP_USER}>`,\r\n      to,\r\n      subject,\r\n      html,\r\n    });\r\n\r\n    console.log('Email enviado:', info.messageId);\r\n  } catch (error) {\r\n    console.error('Erro no sendMail():');\r\n    throw error; \r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,SAAS,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAiD;IACjG,IAAI;QACF,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC7C,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC3B,MAAM;YACN,QAAQ;YACR,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,SAAS;gBAC3B,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC7B;QACF;QAEA,MAAM,OAAO,MAAM,YAAY,QAAQ,CAAC;YACtC,MAAM,CAAC,WAAW,EAAE,QAAQ,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YAC5C;YACA;YACA;QACF;QAEA,QAAQ,GAAG,CAAC,kBAAkB,KAAK,SAAS;IAC9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projeto/fine/src/app/api/cadastro/route.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\nimport { NextResponse } from 'next/server'\r\nimport { sendMail } from '@/lib/sendEmail';\r\nimport bcrypt from 'bcryptjs'\r\nimport crypto from 'crypto'\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const data = await request.json();\r\n    const {\r\n      email,\r\n      senha,\r\n      nome,\r\n      cpf,\r\n      contato,\r\n      cep,\r\n      estado,\r\n      cidade,\r\n      endereco,\r\n      numero,\r\n      complemento,\r\n      \r\n    } = data;\r\n\r\n    // Validação básica\r\n    if (!email || !senha || !nome || !cpf) {\r\n      return NextResponse.json({ error: 'Campos obrigatórios ausentes.' }, { status: 400 });\r\n    }\r\n\r\n    // Verifica se o usuário já existe\r\n    const existingUser = await prisma.user.findUnique({ where: { email } });\r\n    if (existingUser) {\r\n      return NextResponse.json({ error: 'Usuário já existe.' }, { status: 409 });\r\n    }\r\n\r\n    // Criptografa a senha\r\n    const hashedPassword = await bcrypt.hash(senha, 10);\r\n\r\n    // Gera token de verificação\r\n    const tokenVerificacao = crypto.randomBytes(32).toString(\"hex\");\r\n\r\n    // Cria o usuário no banco\r\n    await prisma.user.create({\r\n      data: {\r\n        email,\r\n        senha: hashedPassword,\r\n        nome,\r\n        cpf,\r\n        contato,\r\n        cep,\r\n        estado,\r\n        cidade,\r\n        endereco,\r\n        numero,\r\n        complemento,\r\n        tokenVerificacao,\r\n      },\r\n    });\r\n    await sendMail({\r\n      to: email,\r\n      subject: 'Confirme seu cadastro',\r\n      html: `\r\n        <p>Olá ${nome},</p>\r\n        <p>Para ativar sua conta, clique no link abaixo:</p>\r\n        <a href=\"${process.env.NEXT_PUBLIC_URL}/api/verificar-email?token=${tokenVerificacao}\">Confirmar e-mail</a>\r\n      `\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { message: 'Usuário cadastrado com sucesso. Verifique seu e-mail.' },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error('Erro no cadastro:', error);\r\n    return NextResponse.json(\r\n      { error: 'Erro interno ao processar o cadastro.' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EACJ,KAAK,EACL,KAAK,EACL,IAAI,EACJ,GAAG,EACH,OAAO,EACP,GAAG,EACH,MAAM,EACN,MAAM,EACN,QAAQ,EACR,MAAM,EACN,WAAW,EAEZ,GAAG;QAEJ,mBAAmB;QACnB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACrF;QAEA,kCAAkC;QAClC,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QACrE,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,sBAAsB;QACtB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,OAAO;QAEhD,4BAA4B;QAC5B,MAAM,mBAAmB,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;QAEzD,0BAA0B;QAC1B,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,MAAM;gBACJ;gBACA,OAAO;gBACP;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;YACF;QACF;QACA,MAAM,CAAA,GAAA,yHAAA,CAAA,WAAQ,AAAD,EAAE;YACb,IAAI;YACJ,SAAS;YACT,MAAM,CAAC;eACE,EAAE,KAAK;;iBAEL,4DAA8B,2BAA2B,EAAE,iBAAiB;MACvF,CAAC;QACH;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwD,GACnE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwC,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}