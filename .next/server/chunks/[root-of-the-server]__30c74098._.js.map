{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///C:/fine/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport EmailProvider from \"next-auth/providers/email\";\r\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\r\nimport { PrismaClient } from '@prisma/client'\r\nimport bcrypt from \"bcryptjs\";\r\nimport type { SessionStrategy } from \"next-auth\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const authOptions = {\r\n  adapter: PrismaAdapter(prisma),\r\n\r\n  providers: [\r\n    // LOGIN POR EMAIL (magic link)\r\n    EmailProvider({\r\n      server: process.env.EMAIL_SERVER,\r\n      from: process.env.EMAIL_FROM,\r\n    }),\r\n\r\n    // LOGIN COM SENHA\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        senha: { label: \"Senha\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.senha) return null;\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: { email: credentials.email },\r\n        });\r\n\r\n        if (!user) return null;\r\n\r\n        const senhaCorreta = await bcrypt.compare(credentials.senha, user.senha);\r\n        if (!senhaCorreta) return null;\r\n\r\n        return {\r\n          id: user.id.toString(),\r\n          email: user.email,\r\n          name: user.nome,\r\n        };\r\n      }\r\n\r\n    }),\r\n  ],\r\n\r\n  session: {\r\n    strategy: \"jwt\" as SessionStrategy,\r\n  },\r\n\r\n  pages: {\r\n    signIn: \"/login\",\r\n    verifyRequest: \"/auth/verify-request\",\r\n  },\r\n\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAAc;IACzB,SAAS,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE;IAEvB,WAAW;QACT,+BAA+B;QAC/B,CAAA,GAAA,oJAAA,CAAA,UAAa,AAAD,EAAE;YACZ,QAAQ,QAAQ,GAAG,CAAC,YAAY;YAChC,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC9B;QAEA,kBAAkB;QAClB,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAW;YAC5C;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,OAAO,OAAO;gBAEvD,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,CAAC,MAAM,OAAO;gBAElB,MAAM,eAAe,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,KAAK,EAAE,KAAK,KAAK;gBACvE,IAAI,CAAC,cAAc,OAAO;gBAE1B,OAAO;oBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;oBACpB,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QAEF;KACD;IAED,SAAS;QACP,UAAU;IACZ;IAEA,OAAO;QACL,QAAQ;QACR,eAAe;IACjB;IAEA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}