{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///C:/fine/src/lib/sendEmail.ts"],"sourcesContent":["import nodemailer from \"nodemailer\"\r\n\r\nexport async function sendMail({ to, subject, html }: { to: string; subject: string; html: string }) {\r\n  try {\r\n    const transporter = nodemailer.createTransport({\r\n      host: process.env.SMTP_HOST,\r\n      port: 587,\r\n      secure: false,\r\n      auth: {\r\n        user: process.env.SMTP_USER,\r\n        pass: process.env.SMTP_PASS,\r\n      },\r\n    });\r\n\r\n    const info = await transporter.sendMail({\r\n      from: `\"Seu App\" <${process.env.SMTP_USER}>`,\r\n      to,\r\n      subject,\r\n      html,\r\n    });\r\n\r\n    console.log('Email enviado:', info.messageId);\r\n  } catch (error) {\r\n    console.error('Erro no sendMail():');\r\n    throw error;\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,SAAS,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAiD;IACjG,IAAI;QACF,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC7C,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC3B,MAAM;YACN,QAAQ;YACR,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,SAAS;gBAC3B,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC7B;QACF;QAEA,MAAM,OAAO,MAAM,YAAY,QAAQ,CAAC;YACtC,MAAM,CAAC,WAAW,EAAE,QAAQ,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YAC5C;YACA;YACA;QACF;QAEA,QAAQ,GAAG,CAAC,kBAAkB,KAAK,SAAS;IAC9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///C:/fine/src/app/api/localiza-email/route.ts"],"sourcesContent":["// app/api/recuperar-senha/route.ts\r\n\r\nimport { NextResponse } from \"next/server\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { sendMail } from \"@/lib/sendEmail\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { email } = await req.json();\r\n\r\n    const user = await prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"Usuário não encontrado\" }, { status: 404 });\r\n    }\r\n    await sendMail({\r\n      to: email,\r\n      subject: \"Recuperação de Senha\",\r\n      html: `<p>Você solicitou uma recuperação de senha.</p>`,\r\n    });\r\n\r\n    return NextResponse.json({ sucess: \"Email localizado com sucesso\" });\r\n  } catch (err) {\r\n    return NextResponse.json({ error: \"Erro ao enviar e-mail\" + err }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,mCAAmC;;;;AAEnC;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhC,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QACA,MAAM,CAAA,GAAA,yHAAA,CAAA,WAAQ,AAAD,EAAE;YACb,IAAI;YACJ,SAAS;YACT,MAAM,CAAC,+CAA+C,CAAC;QACzD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;QAA+B;IACpE,EAAE,OAAO,KAAK;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,0BAA0B;QAAI,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF","debugId":null}}]
}