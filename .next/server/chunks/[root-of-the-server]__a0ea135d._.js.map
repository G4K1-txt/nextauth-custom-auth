{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projeto/fine/src/app/api/user/%5Bid%5D/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport async function GET(req: Request) {\r\n  const url = new URL(req.url);\r\n  const id = url.pathname.split(\"/\").pop(); \r\n\r\n  if (!id) {\r\n    return NextResponse.json({ error: \"ID não fornecido\" }, { status: 400 });\r\n  }\r\n\r\n  const userId = parseInt(id);\r\n\r\n  if (isNaN(userId)) {\r\n    return NextResponse.json({ error: \"ID inválido\" }, { status: 400 });\r\n  }\r\n\r\n  const user = await prisma.user.findUnique({\r\n    where: { id: userId },\r\n  });\r\n\r\n  if (!user) {\r\n    return NextResponse.json({ error: \"Usuário não encontrado\" }, { status: 404 });\r\n  }\r\n\r\n  return NextResponse.json(user);\r\n}\r\n\r\n\r\nexport async function PUT(request: NextRequest, context: { params: { id: string } }) {\r\n  const { id } = context.params;\r\n  const userId = parseInt(id);\r\n  const data = await request.json();\r\n\r\n  try {\r\n    const userAtualizado = await prisma.user.update({\r\n      where: { id: userId },\r\n      data: {\r\n        email: data.email,\r\n        cpf: data.cpf,\r\n        contato: data.contato,\r\n        cep: data.cep,\r\n        estado: data.estado,\r\n        cidade: data.cidade,\r\n        endereco: data.endereco,\r\n        numero: data.numero,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(userAtualizado);\r\n  } catch (error) {\r\n    console.error(\"Erro ao atualizar usuário:\", error);\r\n    return new NextResponse(\"Erro ao atualizar usuário\", { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,IAAI,GAAY;IACpC,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;IAC3B,MAAM,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG;IAEtC,IAAI,CAAC,IAAI;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,MAAM,SAAS,SAAS;IAExB,IAAI,MAAM,SAAS;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAc,GAAG;YAAE,QAAQ;QAAI;IACnE;IAEA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QACxC,OAAO;YAAE,IAAI;QAAO;IACtB;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,eAAe,IAAI,OAAoB,EAAE,OAAmC;IACjF,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,MAAM;IAC7B,MAAM,SAAS,SAAS;IACxB,MAAM,OAAO,MAAM,QAAQ,IAAI;IAE/B,IAAI;QACF,MAAM,iBAAiB,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YAC9C,OAAO;gBAAE,IAAI;YAAO;YACpB,MAAM;gBACJ,OAAO,KAAK,KAAK;gBACjB,KAAK,KAAK,GAAG;gBACb,SAAS,KAAK,OAAO;gBACrB,KAAK,KAAK,GAAG;gBACb,QAAQ,KAAK,MAAM;gBACnB,QAAQ,KAAK,MAAM;gBACnB,UAAU,KAAK,QAAQ;gBACvB,QAAQ,KAAK,MAAM;YACrB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,6BAA6B;YAAE,QAAQ;QAAI;IACrE;AACF","debugId":null}}]
}