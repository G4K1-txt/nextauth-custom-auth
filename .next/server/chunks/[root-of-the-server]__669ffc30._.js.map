{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/fine/src/app/api/login/route.ts"],"sourcesContent":["// app/api/login/route.ts\r\nimport { PrismaClient } from '@prisma/client'\r\nimport { NextResponse } from 'next/server'\r\nimport bcrypt from 'bcryptjs'\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { email, senha } = await request.json();\r\n\r\n    // Basic validation\r\n    if (!email || !senha) {\r\n      return NextResponse.json({ error: 'E-mail e senha são obrigatórios.' }, { status: 400 });\r\n    }\r\n\r\n    // Find the user by email\r\n    const user = await prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    // Check if user exists\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'E-mail ou senha inválidos.' }, { status: 401 });\r\n    }\r\n\r\n    // Verify password\r\n    const isPasswordValid = await bcrypt.compare(senha, user.senha);\r\n    if (!isPasswordValid) {\r\n      return NextResponse.json({ error: 'E-mail ou senha inválidos.' }, { status: 401 });\r\n    }\r\n\r\n    if (!user.emailVerificado) {\r\n      return NextResponse.json(\r\n        { error: 'Seu e-mail ainda não foi verificado. Por favor, verifique sua caixa de entrada.' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { message: 'Login bem-sucedido!', user: { id: user.id, email: user.email, nome: user.nome } },\r\n      { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    console.error('Erro no login:', error);\r\n    return NextResponse.json(\r\n      { error: 'Erro interno ao processar o login.' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"AAAA,yBAAyB;;;;AACzB;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE3C,mBAAmB;QACnB,IAAI,CAAC,SAAS,CAAC,OAAO;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmC,GAAG;gBAAE,QAAQ;YAAI;QACxF;QAEA,yBAAyB;QACzB,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;QACjB;QAEA,uBAAuB;QACvB,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,kBAAkB;QAClB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK;QAC9D,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,IAAI,CAAC,KAAK,eAAe,EAAE;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkF,GAC3F;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAuB,MAAM;gBAAE,IAAI,KAAK,EAAE;gBAAE,OAAO,KAAK,KAAK;gBAAE,MAAM,KAAK,IAAI;YAAC;QAAE,GAC5F;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAqC,GAC9C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}